's lf settings

# Basic vars
set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set color256
set icons
set period 1

# Vars that depend on environmental variables
$lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"

# cmds/functions
cmd open ${{
    case $(file --mime-type $f -b) in
	image/vnd.djvu|application/pdf|application/octet-stream) setsid zathura $fx >/dev/null 2>&1 & ;;
    	text/troff) man ./ $f;;
        text/*) $EDITOR $fx;;
	image/x-xcf|image/svg+xml) setsid gimp $f >/dev/null 2>&1 & ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\)\(_large\)*$" | setsid sxiv -aio 2>/dev/null | lf-select & ;;
	audio/*) mpv $f ;;
	video/*) setsid mpv $f -quiet >/dev/null 2>&1 & ;;
	application/pdf) setsid zathura $fx >/dev/null 2>&1 & ;;
        *) for f in $fx; do setsid $OPENER $f >/dev/null 2>&1 & done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd com $com

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "Do you want to delete $fx?"
	prompt "Are you sure?" "sudo rm -rf $fx"
	notify-send -t 2000 "File deleted!"
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf)" &&
	eval mv -iv $fx $dest &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf)" &&
	eval cp -ivr $fx $dest &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd bulkrename ${{
    vidir
}}

cmd sbg ${{
	sbg $f
}}

cmd nart ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Which type of file will you write?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/templates | fzf)" &&
	notify-send "$dest"
	case "$dest" in
	.py) clear; tput cup $(($(tput lines)/3)); tput bold ; set -f; echo "How do you want to call the $dest script?" && cp /home/_neto/Templates/script.py $PWD && read -r name && mv script.py $name.py && nvim $name.py ;;
		.tex) clear; tput cup $(($(tput lines)/3)); tput bold ; set -f; echo "How do you want to call the $dest file?" && cp /home/_neto/Templates/article.tex $PWD && read -r name && mv article.tex $name.tex && nvim $name.tex ;;
		.java)  clear; tput cup $(($(tput lines)/3)); tput bold ; set -f; echo "How do you want to call the $dest program?" && cp /home/_neto/Templates/program.java $PWD && read -r name && mv program.java $name.java && nvim $name.java ;;
		.c)  clear; tput cup $(($(tput lines)/3)); tput bold ; set -f; echo "How do you want to call the $dest program?" && cp /home/_neto/Templates/program.c $PWD && read -r name && mv program.c $name.c && nvim $name.c ;;
		.cpp)  clear; tput cup $(($(tput lines)/3)); tput bold ; set -f; echo "How do you want to call the $dest program?" && cp /home/_neto/Templates/program.cpp $PWD && read -r name && mv program.cpp $name.cpp && nvim $name.c ;;
		bash)  clear; tput cup $(($(tput lines)/3)); tput bold ; set -f; echo "How do you want to call the $dest script?" && cp /home/_neto/Templates/shell $PWD && read -r name && mv shell $name && sudo chmod +x $name && nvim $name ;;
	esac
}}

# Bindings
map <c-t> nart
map <c-f> $lf -remote "send $id select '$(fzf)'"
map J $lf -remote "send $id cd $(cut -d'	' -f2 ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf)"
map gh
map g top
map D delete
map C copyto
map M moveto
map <c-n> push :mkdir<space>
map <c-r> reload
map <enter> shell
map x $$f
map X !$f
map o &mimeopen $f
map O $mimeopen --ask $f
map <c-s> sbg

map A rename # at the very end
map c push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extention
map a push A<a-b> # after extention
map b bulkrename

map <c-c> com
map <bs> set hidden!
map V push :!nvim<space>
